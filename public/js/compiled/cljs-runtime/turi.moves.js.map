{"version":3,"sources":["turi/moves.cljs"],"mappings":";;AACA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAASC;;AAqoBT,AAAKC,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAuCV,AAAA,AAAMC,AAAUC;AAAhB,AAAmB,AAAAC,AAAA,AAAAC,AAAIL;AAAJ,AAAA,AAAAI,AAAAA,AAACD,AAAAA,AAAAA;;AACpB,AAAA,AAAMG,AAAUC;AAAhB,AAAqB,AAAM,AAAA,AAACC,AAAKD;AAAZ;;AAAA,AAAoB,AAAA,AAACC,AAAKD;AAA1B;;AAAA,AAAA;;;;;AACrB,AAAA,AAAME,AAAOC;AAAb,AAAA,AAAiB,AAAA,AAAKA,AAAG,AAAA,AAAKA;;AAC9B,AAAA,AAAMC,AAAUC,AAAGC;AAAnB,AAAsB,AAAK,AAAA,AAAID,AAAM,AAAGA,AAAG,AAACE,AAAMD;;AAClD,AAAA,AAAME,AAAMF,AAAEV,AAAES;AAAhB,AACE,AAAMI,AAAG,AAAUH,AAAEV;AAAGc,AAAG,AAAGL,AAAG,AAAGA,AAAGI;AAAvC,AACE,AAAI,AAACL,AAASC,AAAGC;AACb,AAAMK,AAAG,AAACC,AAAIN,AAAED;AAAhB,AACE,AAAI,AAAA,AAACJ,AAAE,AAACN,AAASgB;AAAjB,AAAA,AAAA,AAAA,AACQA;;AACJ,AAAI,AAAK,AAACP,AAASM,AAAGJ,AAAG,AAACL,AAAE,AAACF,AAAS,AAACJ,AAASC,AAAI,AAACD,AAASgB;AAC1D,AAAME,AAAG,AAACD,AAAIN,AAAEI;AAAhB,AACE,AAAI,AAAA,AAACT,AAAE,AAACN,AAASkB;AAAjB,AAAA,AAAA,AAA6BA,AAAMF;;AAAnC;;;AAFN;;;;AAJV;;;AASJ,AAAA,AAAMG,AAAOR,AAAEV;AAAf,AACI,AAAA,AAAAmB,AAACC;AAAD,AAAU,AAAA,AAAAD,AAACE;AAAc,AAAA,AAAAC,AAACC;AAAD,AAAO,AAAAD,AAACV,AAAKF,AAAEV;AAAK,AAACM,AAAM,AAAUI,AAAEV;;AAEpE,AAAA,AAAMwB,AAAMd,AAAEe;AAAd,AAAiB,AAAA,AAAAC,AAACC;AAAD,AAAO,AAAAD,AAACrB,AAAIoB;AAAGf;;AAEhC,AAAA,AAAMkB,AAAQ5B;AAAd,AACE,AAAI,AAAA,AAACK,AAAE,AAACN,AAASC;AAAjB;;AAEI,AAAC6B,AAAQ,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAACZ,AAAQlB;AAAG,AAAA,AAAAgC,AAACC;AAAD,AAAS,AAAAD,AAACR,AAAOxB;AAAGJ;;;AAErD,AAAA,AAAMsC,AAAkBlC,AAAEmC;AAA1B,AACE,AAAI,AAAA,AAAAC,AAACT;AAAD,AAAO,AAAAS,AAAC/B,AAAI8B;AAAM,AAACP,AAAO5B;AAC1B,AAAA,AAAAE,AAAMmC,AAAKxC;AAAX,AACE,AAAI,AAAA,AAACQ,AAAQ,AAAA,AAAI8B;AACb,AAACG,AAAOzC,AAAI,AAAC0C,AAAM,AAAA,AAACA,AAAMF,AAAIrC,AAAM,AAAA,AAAImC,AAAM,AAACpC,AAASC;;AACxD,AAACsC,AAAOzC,AAAI,AAAA,AAAC0C,AAAM,AAACA,AAAM,AAAA,AAACA,AAAMF,AAAIrC,AAAM,AAAA,AAAImC,AAAM,AAACpC,AAASC,AAAI,AAAA,AAAImC;;;AAJjF","names":["js/turi","js/turi.moves","js/turi.moves.points","turi.moves/points","js/turi.moves.lines","turi.moves/lines","turi.moves/pos","cljs.core.atom","turi.moves/pos-of-p","p","G__27316","cljs.core/deref","turi.moves/oppo-pos","pos","cljs.core._EQ_","turi.moves/adjis","i","turi.moves/valid-ix","ix","l","cljs.core/count","turi.moves/movs","ip","ex","xp","cljs.core.nth","yp","turi.moves/pm-lp","p1__27317#","cljs.core/filterv","cljs.core.not_EQ_","p1__27318#","cljs.core.mapv","turi.moves/lhas","e","p1__27319#","cljs.core/some","turi.moves/pmoves","cljs.core/flatten","p1__27320#","cljs.core.map","p1__27321#","cljs.core.filter","turi.moves/check-make-pmove","move","p1__27322#","poo","cljs.core/reset!","cljs.core.assoc"],"sourcesContent":["(ns turi.moves)\n(defonce points {:ar0 [-2 1]\n                 :ar1 [-1 1]\n                 :ar2 [0 1]\n                 :ar3 [1 1]\n                 :ar4 [2 1]\n                 :ar5 [-2 2]\n                 :ar6 [-1 2]\n                 :ar7 [0 2]\n                 :ar8 [1 2]\n                 :ar9 [2 2]\n                 :at0 [-1.5 3.5]\n                 :at1 [0 3.5]\n                 :at2 [1.5 3.5]\n                 :at3 [-0.75 2.75]\n                 :at4 [0 2.75]\n                 :at5 [0.75 2.75]\n                 :br0 [-2 -1]\n                 :br1 [-1 -1]\n                 :br2 [0 -1]\n                 :br3 [1 -1]\n                 :br4 [2 -1]\n                 :br5 [-2 -2]\n                 :br6 [-1 -2]\n                 :br7 [0 -2]\n                 :br8 [1 -2]\n                 :br9 [2 -2]\n                 :bt0 [-1.5 -3.5]\n                 :bt2 [1.5 -3.5]\n                 :bt1 [0 -3.5]\n                 :bt3 [-0.75 -2.75]\n                 :bt4 [0 -2.75]\n                 :bt5 [0.75 -2.75]\n                 :cr0 [-2 0]\n                 :cr1 [-1 0]\n                 :cr2 [0 0]\n                 :cr3 [1 0]\n                 :cr4 [2 0]})\n(defonce lines [[:at0 :at1 :at2]\n                [:at3 :at4 :at5]\n                [:ar5 :ar6 :ar7 :ar8 :ar9]\n                [:ar0 :ar1 :ar2 :ar3 :ar4]\n                [:cr0 :cr1 :cr2 :cr3 :cr4]\n                [:br0 :br1 :br2 :br3 :br4]\n                [:br5 :br6 :br7 :br8 :br9]\n                [:bt3 :bt4 :bt5]\n                [:bt0 :bt1 :bt2]\n                [:ar5 :ar0 :cr0 :br0 :br5]\n                [:ar6 :ar1 :cr1 :br1 :br6]\n                [:at1 :at4 :ar7 :ar2 :cr2 :br2 :br7 :bt4 :bt1]\n                [:ar8 :ar3 :cr3 :br3 :br8]\n                [:ar9 :ar4 :cr4 :br4 :br9]\n                [:at0 :at3 :ar7 :ar3 :cr4]\n                [:cr4 :br3 :br7 :bt3 :bt0]\n                [:at2 :at5 :ar7 :ar1 :cr0]\n                [:cr0 :br1 :br7 :bt5 :bt2]\n                [:ar5 :ar1 :cr2 :br3 :br9]\n                [:br5 :br1 :cr2 :ar3 :ar9]])\n(def pos (atom {:ar0 :a\n                :ar1 :a\n                :ar2 :a\n                :ar3 :a\n                :ar4 :a\n                :ar5 :a\n                :ar6 :a\n                :ar7 :a\n                :ar8 :a\n                :ar9 :a\n                :at0 :a\n                :at1 :a\n                :at2 :a\n                :at3 :a\n                :at4 :a\n                :at5 :a\n                :br0 :b\n                :br1 :b\n                :br2 :b\n                :br3 :b\n                :br4 :b\n                :br5 :b\n                :br6 :b\n                :br7 :b\n                :br8 :b\n                :br9 :b\n                :bt0 :b\n                :bt2 :b\n                :bt1 :b\n                :bt3 :b\n                :bt4 :b\n                :bt5 :b\n                :cr0 :c\n                :cr1 :c\n                :cr2 :c\n                :cr3 :c\n                :cr4 :c}))\n\n\n(defn pos-of-p [p] (p @pos))\n(defn oppo-pos [pos] (cond (= :a pos) :b (= :b pos) :a :else :c))\n(defn adjis [i] [(dec i) (inc i)])\n(defn valid-ix [ix l] (and (>= ix 0) (< ix (count l))))\n(defn movs [l p ix]\n  (let [ip (.indexOf l p) ex (+ ix (- ix ip))]\n    (if (valid-ix ix l)\n        (let [xp (nth l ix)]\n          (if (= (pos-of-p xp) :c)\n              {:m xp :e :none}\n              (if (and (valid-ix ex l) (= (oppo-pos (pos-of-p p)) (pos-of-p xp)))\n                  (let [yp (nth l ex)]\n                    (if (= (pos-of-p yp) :c) {:m yp :e xp} :none))\n                  :none)))\n        :none)))\n(defn pm-lp [l p]\n    (filterv #(not= :none %) (mapv #(movs l p %) (adjis (.indexOf l p)))))\n\n(defn lhas [l e] (some #(= % e) l))\n\n(defn pmoves [p]\n  (if (= (pos-of-p p) :none)\n      []\n      (flatten (map #(pm-lp % p) (filter #(lhas % p) lines)))))\n\n(defn check-make-pmove [p move]\n  (if (some #(= % move) (pmoves p))\n      (let [poo @pos]\n        (if (= :none (:e move))\n            (reset! pos (assoc (assoc poo p :c) (:m move) (pos-of-p p)))\n            (reset! pos (assoc (assoc (assoc poo p :c) (:m move) (pos-of-p p)) (:e move) :c))))))\n"]}