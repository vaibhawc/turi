{"version":3,"sources":["turi/core.cljs"],"mappings":"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","names":["js/turi","js/turi.core","js/turi.core.app-state","turi.core/app-state","reagent.core.atom","turi.core/select-p","p","cljs.core.not_EQ_","cljs.core/deref","turi.moves/pos-of-p","npmoves","turi.moves/pmoves","cljs.core/reset!","cljs.core.assoc","cljs.core.map","turi.moves/lhas","expmoves","turi.moves/check-make-pmove","cljs.core/first","p1__27311#","cljs.core.filter","cljs.core._EQ_","js/turi.core.x","turi.core/x","turi.core/draw-point","sx","sy","sc","pl","r","color","turi.moves/points","cljs.core/second","turi.core/draw-line","p1","p2","turi.core/board","p1__27312#","cljs.core/last","turi.moves/lines","p1__27313#","cljs.core/keys","turi.core/start","reagent.core.render","js/document","turi.core/init","turi.core/stop","js/console.log"],"sourcesContent":["(ns turi.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as d]\n            [turi.moves :as moves]))\n\n;;\n;; define your app data so that it doesn't get over-written on reload\n;(moves/adjis 0)\n\n\n(defonce app-state (r/atom {:selected-p :none :m [] :e []}))\n(defn select-p [p]\n  (cond (and (not= :p (:selected-p @app-state)) (not= :c (moves/pos-of-p p)))\n        (let [npmoves (moves/pmoves p)]\n          ;(js/alert npmoves)\n          (reset! app-state (assoc (assoc (assoc @app-state :selected-p p) :m (map :m npmoves)) :e (map :e npmoves))))\n        (and (not= :p (:selected-p @app-state)) (moves/lhas (:m @app-state) p))\n        (let [expmoves (moves/pmoves (:selected-p @app-state)) npmoves (moves/pmoves p)]\n          ;(js/alert (first (filter #(= (:m %) p) expmoves)))\n          ;(js/alert npmoves)\n          (moves/check-make-pmove (:selected-p @app-state) (first (filter #(= (:m %) p) expmoves)))\n          (reset! app-state (assoc (assoc (assoc @app-state :selected-p p) :m (map :m (moves/pmoves p))) :e (map :e (moves/pmoves p)))))))\n\n(defonce x 78)\n\n(defn draw-point [p sx sy sc]\n  (let [pl (moves/pos-of-p p)\n        r (if (not= pl :c) (if (= p (:selected-p @app-state)) 20 12) (if (moves/lhas (:m @app-state) p) 10 1))\n        color (cond (= pl :a) \"red\" (= pl :b) \"blue\" (moves/lhas (:m @app-state) p) \"green\" :else \"grey\")]\n    [:circle {:key (str p)\n              :on-click #(select-p p)\n              :cx (+ sx (* sc (first (p moves/points))))\n              :cy (+ sy (* sc (second (p moves/points))))\n              :r r\n              :stroke \"black\"\n              :fill color\n              :style {:transition \"300ms\"}}]))\n\n(defn draw-line [p1 p2 sx sy sc] [:line {:key (str (str p1) (str p2))\n                                         :x1 (+ sx (* sc (first (p1 moves/points))))\n                                         :y1 (+ sy (* sc (second (p1 moves/points))))\n                                         :x2 (+ sx (* sc (first (p2 moves/points))))\n                                         :y2 (+ sy (* sc (second (p2 moves/points))))\n                                         :stroke \"grey\"\n                                         :stroke-width 2}])\n(defn board []\n  @app-state\n  [:svg {:style {:x 0 :y 0 :width (+ 48 (* 4 x)) :height (+ 48 (* 8 x)) :background-color \"white\"}}\n   (map #(draw-line (first %) (last %)  (+ 22 (* 2 x)) (+ 22 (* 4 x)) x) moves/lines)\n   (map #(draw-point % (+ 22 (* 2 x)) (+ 22 (* 4 x)) x) (keys moves/points))])\n\n\n(defn start []\n  (r/render [board]\n          (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}